{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a0a6ee05",
   "metadata": {},
   "source": [
    "# Jupiter Tutorial\n",
    "## 1. What is Jupyter Notebook?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4524559a",
   "metadata": {},
   "source": [
    "The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualization."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d627db36",
   "metadata": {},
   "source": [
    "## 2. Live Code Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "61411238",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3+4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3e385582",
   "metadata": {},
   "outputs": [],
   "source": [
    "# adding two parameter\n",
    "def add(a,b):\n",
    "    return a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c5a02169",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "add(5,4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "519abe45",
   "metadata": {},
   "source": [
    "## 3. Equation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b97c8f82",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sqrt(x^2+y^2+z^2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "034f567f",
   "metadata": {},
   "source": [
    "This expression $\\sqrt{x^2+y^2+z^2}$ is an example of a TeX inline equation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47359850",
   "metadata": {},
   "source": [
    "[More Examples click here](http://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Typesetting%20Equations.html)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4273a231",
   "metadata": {},
   "source": [
    "## 4. Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35b26d9d",
   "metadata": {},
   "source": [
    "### 4.1 image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4ae562c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<img src=\"https://images.velog.io/images/t1won/post/bfae116b-aa6b-4831-b2d2-8395193361cf/jupyter.png\" width=\"400\" height=\"200\"/>"
      ],
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "Image(url = \"https://images.velog.io/images/t1won/post/bfae116b-aa6b-4831-b2d2-8395193361cf/jupyter.png\", width=400, height=200)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ff36ba8",
   "metadata": {},
   "source": [
    "### 4.2 video"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "654378b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/jpeg": "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\n",
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"400\"\n",
       "            height=\"300\"\n",
       "            src=\"https://www.youtube.com/embed/vJwrhhL5f8Y\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.YouTubeVideo at 0x1e9f7190dc0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import YouTubeVideo\n",
    "YouTubeVideo('vJwrhhL5f8Y')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7ef01e9",
   "metadata": {},
   "source": [
    "### 4.3 table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2292942c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Benin</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Botswana</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Burkina</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Burundi</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Cameroon</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Cape Verde</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Central African Republic</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Chad</td>\n",
       "      <td>AFRICA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Country  Region\n",
       "0                   Algeria  AFRICA\n",
       "1                    Angola  AFRICA\n",
       "2                     Benin  AFRICA\n",
       "3                  Botswana  AFRICA\n",
       "4                   Burkina  AFRICA\n",
       "5                   Burundi  AFRICA\n",
       "6                  Cameroon  AFRICA\n",
       "7                Cape Verde  AFRICA\n",
       "8  Central African Republic  AFRICA\n",
       "9                      Chad  AFRICA"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "url =\"https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv\"\n",
    "pd.read_csv(url, nrows=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9d27f2b",
   "metadata": {},
   "source": [
    "### 4.4 chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b05af4a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Matplotlib is building the font cache; this may take a moment.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot([1,2,3,4])\n",
    "plt.ylabel('result')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8c2396e",
   "metadata": {},
   "source": [
    "## 5. Performance check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b3e6322b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15.5 ns ± 0.0211 ns per loop (mean ± std. dev. of 7 runs, 100,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit 3+4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3f8d2a38",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163 ns ± 0.433 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit add(3,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f9c7e245",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "639 ns ± 48.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "a = [1,2,3]\n",
    "a = [x+1 for x in a]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9e7d023b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "963 ns ± 46.6 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "b = [1,2,3]\n",
    "for i in range(len(b)):\n",
    "    b[i] = b[i] + 1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
